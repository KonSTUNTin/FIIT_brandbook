varying vec2 vUv;
uniform float time;
uniform float k;
uniform float size;
uniform float rColor;
uniform float gColor;
uniform float bColor;
uniform float formtype;
uniform float black;
uniform float trace;
uniform float split;
uniform float logoAlpha;
uniform float bracketAlpha;
uniform float borderAlpha;
uniform float logoSize;
uniform sampler2D pic;
uniform sampler2D logo;
uniform sampler2D borders;
uniform sampler2D bracket;
vec2 random( vec2 p ) {
    return fract(sin(vec2(dot(p,vec2(127.1,311.7 )),dot(p,vec2(269.5,183.3))))*43758.5453);
}

void main(){
    float kk = size;
    vec2 ip = vUv;
    ip -= .5;
    ip.y /= k;
    ip += .5;
    vec2 mv = floor(vUv * kk) / kk; 
    vec4 col = texture2D(pic, mv) * trace / 100.;
    kk *= floor((1. - col.r) * split);

    vec2 p = fract(ip * kk);

    float r = smoothstep(
        (1. - col.r) *.9 * black / 100.,
        (1. - col.r) * black / 100.,
        length(p - .5) );

    float cc = step(
        (1. - col.r) * black / 100.,
        abs(p.x - .5)) + 
        step(
        (1. - col.r) * black / 100.,
        abs(p.y - .5));

    r = cc * formtype / 100. + (1.- formtype / 100.) * r;

    float lr = 1. - r;
    vec4 abstract = vec4(
        max(lr * rColor, 17.) / 256., 
        max(lr * gColor, 15.) / 256., 
        max(lr * bColor, 44.) / 256., 
        1.);
    vec2 mp = vUv;
    mp -= .5;
    mp.x *= k;
    mp *= logoSize / 30.;
    mp += .5;
    vec4 logoTex = texture2D(logo, mp);
    vec4 bracketTex = texture2D(bracket, mp);
    vec4 bordersTex = texture2D(borders, mp);
    gl_FragColor = abstract + logoTex * logoAlpha + bracketTex * bracketAlpha + bordersTex * borderAlpha;
}